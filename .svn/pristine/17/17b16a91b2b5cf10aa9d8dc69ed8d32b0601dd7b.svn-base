<?php
require_once 'DBManager.php';
require_once 'interfaces/ISharesManager.php';

class SharesManager implements ISharesManager{
    public $database;

    /*
     * Crea l'oggetto del Gestore Dababase
     */
    public function __construct(){
        $this->database = new DBManager();
    }





    public function creaCondivisione($post, $idsensore) {
        if($post['terzaparte']==0 || !isset($post['canale'])) {
            return array (
                'error' => 1,
                'idsensore' => $idsensore
            );
        }

        if($this->shareAlreadyExists($post['terzaparte'], $idsensore, $post['canale'])) {
            return array (
                'error' => 2,
                'idsensore' => $idsensore
            );
        }

        $this->database->query('INSERT INTO condivisione(Sensore, Canale, TerzaParte) VALUES (:sensore, :canale, :terzaparte)');
        $this->database->bind(':sensore', $idsensore);
        $this->database->bind(':canale', $post['canale']);
        $this->database->bind(':terzaparte', $post['terzaparte']);
        $this->database->execute();
    }




    public function getCondivisioni($idambiente){
        $this->database->query('SELECT IDCondivisione, sensore.Nome AS NomeSensore, terzaparte.Nome AS NomeTerzaParte, tipologiacanale.Nome AS NomeTipologiaCanale FROM condivisione JOIN sensore JOIN canale JOIN terzaparte JOIN tipologiacanale ON condivisione.Sensore = sensore.IDSensore AND condivisione.Canale = canale.IDCanale AND condivisione.TerzaParte = terzaparte.IDTerzaParte AND canale.TipologiaCanale = tipologiacanale.IDTipologiaCanale WHERE sensore.Ambiente = :idambiente');
        $this->database->bind(':idambiente', $idambiente);
        return $this->database->resultSet();
    }




    public function shareAlreadyExists($idterzaparte, $idsensore, $idcanale){
        $this->database->query('SELECT * FROM condivisione WHERE TerzaParte = :terzaparte AND Canale = :canale AND Sensore = :sensore');
        $this->database->bind(':terzaparte', $idterzaparte);
        $this->database->bind(':canale', $idcanale);
        $this->database->bind(':sensore', $idsensore);
        $row = $this->database->singleResultSet();

        if(empty($row)===false){
            return 1;
        }

        return 0;
    }



    public function eliminaCondivisione($id) {
        //eliminazione di una terza parte
        $this->database->query('DELETE FROM condivisione WHERE IDCondivisione= :idcondivisione');
        $this->database->bind(':idcondivisione', $id); 
        $this->database->execute();
    }





    public function trovaCondivisione($id) {
        $this->database->query('SELECT IDCondivisione, ambiente.Impianto AS Impianto, sensore.Ambiente AS Ambiente, Valore, sensore.Nome AS NomeSensore, terzaparte.Nome AS NomeTerzaParte, tipologiacanale.Nome AS NomeTipologiaCanale FROM condivisione JOIN sensore JOIN canale JOIN terzaparte JOIN tipologiacanale JOIN ambiente ON condivisione.Sensore = sensore.IDSensore AND condivisione.Canale = canale.IDCanale AND condivisione.TerzaParte = terzaparte.IDTerzaParte AND canale.TipologiaCanale = tipologiacanale.IDTipologiaCanale AND sensore.Ambiente = ambiente.IDAmbiente WHERE IDCondivisione = :idcondivisione');
        $this->database->bind(':idcondivisione', $id);
        return $this->database->singleResultSet();
    }



    
    public function checkProperty($idsensore, $codicefiscale) {
        $this->database->query('SELECT * FROM gestione JOIN ambiente JOIN sensore ON gestione.Impianto = ambiente.Impianto AND ambiente.IDAmbiente = sensore.Ambiente WHERE IDSensore = :idsensore AND Utente = :codicefiscale');
        $this->database->bind(':codicefiscale', $codicefiscale);
        $this->database->bind(':idsensore', $idsensore);
        $row = $this->database->singleResultSet();
  
        if(empty($row)===false){
          return 1;
        }
  
        return 0;
      
    }



    
    public function checkShareProperty($idcondivisione, $codicefiscale) {
        $this->database->query('SELECT * FROM condivisione JOIN terzaparte ON condivisione.TerzaParte = terzaparte.IDTerzaParte WHERE condivisione.IDCondivisione = :idcondivisione AND terzaparte.Utente = :codicefiscale');
        $this->database->bind(':codicefiscale', $codicefiscale);
        $this->database->bind(':idcondivisione', $idcondivisione);
        $row = $this->database->singleResultSet();
  
        if(empty($row)===false){
          return 1;
        }
  
        return 0;
      
    }


    public function inviaDati(){
        $this->database->query('SELECT IDCondivisione, Sensore, Canale, Valore, TipologiaCanale FROM Condivisione JOIN Canale ON Condivisione.Canale = Canale.IDCanale');
        $condivisioni = $this->database->resultSet();


        // echo "<pre>";
        // print_r($condivisioni);
        // echo "</pre>";

        foreach ($condivisioni as $condivisione){
           
            $this->database->query('SELECT Data, Valore FROM Sensore JOIN Rilevazione ON IDSensore = Sensore WHERE IDSensore = :idsensore ORDER BY Data DESC LIMIT 20');
            $this->database->bind(':idsensore', $condivisione['Sensore']);
            $rilevazioni = $this->database->resultSet();

            // echo "<pre>";
            // print_r($rilevazioni);
            // echo "</pre><br><br>";

            // $this->database->query('SELECT IDCondivisione, Canale, Valore, TipologiaCanale FROM Condivisione JOIN Canale ON Condivisione  WHERE Sensore = :idsensore');
            // $this->database->bind(':idsensore', $condivisione['Sensore']);
            // $canale = $this->database->singleResultSet();

            //inviaMail($rilevazioni, "Report rilevazioni sensore ".$condivisione['Sensore'], $canale['Valore'], "Report rilevazioni", "email@example.it");
            


        }
    }



    public function inviaPOST($url, $dati){
        // use key 'http' even if you send the request to https://...
        $options = array(
            'http' => array(
                'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
                'method'  => 'POST',
                'content' => http_build_query($dati)
            )
        );
        $context  = stream_context_create($options);
        $result = file_get_contents($url, false, $context);
        if ($result === FALSE) { /* Handle error */ }

        var_dump($result);
    }



    public function create_csv_string($data) {
    
        // Open temp file pointer
        if (!$fp = fopen('php://temp', 'w+')) return FALSE;
        
        fputcsv($fp, array('Data', 'Valore'));

        foreach($data as $dato) {
            fputcsv($fp, $dato);
        }
        
        // Place stream pointer at beginning
        rewind($fp);

        return stream_get_contents($fp);
    
    }
    
    public function inviaMail($csvData, $body, $to, $subject = 'Report rilevazioni', $from) {
    
        // This will provide plenty adequate entropy
        $multipartSep = '-----'.md5(time()).'-----';
    
        // Arrays are much more readable
        $headers = array(
            "From: $from",
            "Reply-To: $from",
            "Content-Type: multipart/mixed; boundary=".$multipartSep
        );
    
        // Make the attachment
        $attachment = chunk_split(base64_encode($this->create_csv_string($csvData))); 
    
        // Make the body of the message
        $body = "--".$multipartSep."\r\n"
            . "Content-Type: text/plain; charset=ISO-8859-1; format=flowed\r\n"
            . "Content-Transfer-Encoding: 7bit\r\n"
            . "\r\n"
            . $body."\r\n"
            . "--".$multipartSep."\r\n"
            . "Content-Type: text/csv\r\n"
            . "Content-Transfer-Encoding: base64\r\n"
            . "Content-Disposition: attachment; filename=Report-rilevazioni-" . date("F-j-Y") . ".csv\r\n"
            . "\r\n"
            . $attachment."\r\n"
            . "--$multipartSep--";
    
        // Send the email, return the result
        return @mail($to, $subject, $body, implode("\r\n", $headers)); 
    
    }
    

    



}